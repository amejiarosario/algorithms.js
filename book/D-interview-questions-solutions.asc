<<<
[appendix]
[[d-interview-questions-solutions]]
== Interview Questions Solutions
(((Interview Questions Solutions)))

=== Solutions for Array Questions
(((Interview Questions Solutions, Arrays)))

:leveloffset: -1

[#array-q-max-subarray]
include::content/part02/array.asc[tag=array-q-max-subarray]

The first step is making sure we understand the problem well. Let's do basic examples:

----
A = [-5, 6, 9, -8]
B = [-1, 6, -3, 8]
----

What's the subarray with the maximum sum? For A, it will be `[6, 9]` and for B, it will be `[6, -3, 8]`.

We could generate all possible subarrays, add them up, and then pick the max number.

[source, javascript]
----
include::interview-questions/max-subarray.js[tag=maxSubArrayBrute1]
----

This code is simple to understand; however, not very efficient. The runtime is `O(n^3)`.

Notice we're adding up the numbers from `i` to `j` on each cycle. But, we can optimize this. We can keep a local variable and add the new number to it. That way, we don't have to revisit previous numbers.

[source, javascript]
----
include::interview-questions/max-subarray.js[tag=maxSubArrayBrute2]
----

The runtime is much better: `O(n)`. Can we still do better?

We can use a greedy approach, where do one pass through the array. We only add the numbers if their sum is larger than just taking the current element.

[source, javascript]
----
include::interview-questions/max-subarray.js[tag=description]
include::interview-questions/max-subarray.js[tag=solution]
----

The runtime is `O(n)` and space complexity of `O(1)`.




[#array-q-buy-sell-stock]
include::content/part02/array.asc[tag=array-q-buy-sell-stock]

There are multiple examples that we can simulate: bear markets (when prices are going down), bullish markets (when prices are going up), and zig-zag markets (when prices are going up and down).

[source, javascript]
----
// zig-zag market
maxProfit([5, 10, 5, 10]); // => 5
// bullish market
maxProfit([1, 2, 3]); // => 2
// bearish market
maxProfit([3, 2, 1]); // => 0
----

During the bearish markets, the profit will always be 0. Since if you buy, we are only going to lose.

We can do a brute force solution doing all combinations:

[source, javascript]
----
include::interview-questions/buy-sell-stock.js[tag=maxProfitBrute1]
----

The runtime for this solution is `O(n^2)`.

A better solution is to eliminate the 2nd for loop and only do one pass.

Algorithm:

- Do one pass through all the prices
    - Keep track of the minimum price seen so far.
    - calculate `profit = currentPrice - minPriceSoFar`
    - Keep track of the maximun profit seen so far.
- Return maxProfit.

[source, javascript]
----
include::interview-questions/buy-sell-stock.js[tag=description]
include::interview-questions/buy-sell-stock.js[tag=solution]
----

The runtime is `O(n)` and space complexity of `O(1)`.



:leveloffset: +1

=== Solutions for Linked List Questions
(((Interview Questions Solutions, Linked Lists)))

:leveloffset: -1




[#linkedlist-q-merge-lists]
include::content/part02/linked-list.asc[tag=linkedlist-q-merge-lists]

We need to visit each node in both lists and merge them in ascending order. Note: We don't need to copy the values nor create new nodes.

Another case to take into consideration is that lists might have different lengths. So, if one list runs out, we have to keep taking elements from the remaining list.

*Algorithm*:

- Have a pointer for each list
- While there's a pointer that is not null, visite them
    - Compare each list node's value and take the smaller one.
    - Advance the pointer of the taken node to the next one.

*Implementation*:

[source, javascript]
----
include::interview-questions/merge-lists.js[tag=description]
include::interview-questions/merge-lists.js[tag=solution]
----

Notice that we used a "dummy" node or "sentinel node" to have some starting point for the final list.

*Complexity Analysis*:

- Time: `O(m+n)`. Visiting each node from the list 1 and list 2 has a time complexity `O(m + n)`. `m` and `n` represent each list's length.
- Space: `O(1)`. We reuse the same nodes and only change their `next` pointers. We only create one additional node, "the sentinel node."


[#linkedlist-q-linkedlist-same-data]
include::content/part02/linked-list.asc[tag=linkedlist-q-linkedlist-same-data]

We are given two linked lists that contain string data. We want to know if the concatenated strings from each list are the same.

The tricky part is that the same data can be distributed differently on the linked lists:

----
L1: he -> ll -> o
L2: h -> e -> llo
----

One naive approach could be to go through each list's node and concatenate the strings. Then, we can check if they are equal.

[source, javascript]
----
include::interview-questions/linkedlist-same-data.js[tag=hasSameDataBrute1]
----

Notice that the problem mentions that lists could be huge (millions of nodes). If the first character on each list is different, we are unnecessarily computing millions of nodes, when a straightforward check will do the job.

A better way to solve this problem is iterating over each character on both lists, and when we found mistmatch, we return `false` immediately. If they are the same, we still have to visit all of them.

*Algorithm*:

- Set a pointer to iterate over each node in the lists.
- For each node, have an index (starting at zero) and compare if both lists have the same data.
    - When the index reaches the last character on the current node, we move to the next node.
    - If we found that a character from one list doesn't match the other, we return `false`.

*Implementation*:

[source, javascript]
----
include::interview-questions/linkedlist-same-data.js[tag=description]
include::interview-questions/linkedlist-same-data.js[tag=solution]
----

The function `findNextPointerIndex` is a helper to navigate each character on a linked list.
Notice, that we increase the index (`i + 1`) on each iteration.
If the index overflows, it moves to the next node and reset the index to zero.



*Complexity Analysis*:

- Time: `O(n)`. We go over all the characters on each list
- Space: `O(1)`. Only using pointers and no auxiliary data structures.



:leveloffset: +1

=== Solutions for Stack Questions
(((Interview Questions Solutions, Stack)))

:leveloffset: -1

[#stack-q-valid-parentheses]
include::content/part02/stack.asc[tag=stack-q-valid-parentheses]

.We need to validate that brackets are properly opened and closed, following these rules:
- An opened bracket must be close by the same type.
- Open brackets mush be closed in the correct order.

This is a parsing problem, and usually, stacks are good candidates for them.

*Algorithm*:

- Create a mapping for each opening bracket, to its closing counterpart.
- Iterate through the string
    - When we found an opening bracket, insert the corresponding closing bracket into the stack.
    - When we found a closing bracket, pop from the stack and make sure it corresponds to the current character.
- Check the stack is empty. If there's a leftover, it means that something didn't close properly.

*Implementation*:

[source, javascript]
----
include::interview-questions/valid-parentheses.js[tag=description]
include::interview-questions/valid-parentheses.js[tag=solution]
----

*Complexity Analysis*:

- Time: `O(n)`. We iterate over each character of the string.
- Space: `O(n)`. We use an auxiliary stack.



[#stack-q-daily-temperatures]
include::content/part02/stack.asc[tag=stack-q-daily-temperatures]

The first solution that might come to mind it's using two for loops. For each element, we have visit each temperature ahead to find a bigger one.

[source, javascript]
----
include::interview-questions/daily-temperatures.js[tag=dailyTemperaturesBrute1]
----

This solution is an `O(n^2)`. Can we do better? We can!

Here's an idea: start backward, so we know when there's a warmer temperature beforehand. The last element is always 0 (because there are no more temperatures ahead of it). We can place each element's index that we visit on a stack. If the current weather is bigger than the stack top, we remove it until a bigger one remains or the stack is empty. If the stack has a value, we calculate the number of days ahead. Otherwise, it is 0.

*Algorithm*:

- Traverse the daily temperatures backward
  - Push each temperature to a stack.
  - While the current temperature is larger than the one at the top of the stack, pop it.
  - If the stack is empty, then there's no warmer weather ahead, so it's 0.
  - If the stack has an element, calculate the index delta.

*Implementation*:

[source, javascript]
----
include::interview-questions/daily-temperatures.js[tag=description]
include::interview-questions/daily-temperatures.js[tag=solution]
----

The stack contains the indexes rather than the temperatures themselves.

*Complexity Analysis*:

- Time: `O(n)`. We visit each element on the array once.
- Space: `O(1)`. The worst-case scenario is ascending order without duplicates. The stack will hold at most 70 items (100 - 30). If we didn't have the range restriction, then space complexity would be `O(n)`.



// [#linkedlist-q-FILENAME]
// include::content/part02/linked-list.asc[tag=linkedlist-q-FILENAME]

// RESTATE REQUIREMENTS AND DESCRIPTIONS

// *Algorithm*:

// - STEP 1
// - STEP 2
//     - STEP 2.1
//     - STEP 2.2

// *Implementation*:

// [source, javascript]
// ----
// include::interview-questions/FILENAME.js[tag=description]
// include::interview-questions/FILENAME.js[tag=solution]
// ----

// IMPLEMENTATION NOTES

// *Complexity Analysis*:

// - Time: `O(?)`. WHY?
// - Space: `O(?)`. WHY?

