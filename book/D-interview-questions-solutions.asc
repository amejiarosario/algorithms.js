[appendix]
[[d-interview-questions-solutions]]
== Interview Questions Solutions
(((Interview Questions Solutions)))

=== Solutions for Array Questions
(((Interview Questions Solutions, Arrays)))

:leveloffset: -1

[#array-q-max-subarray]
include::content/part02/array.asc[tag=array-q-max-subarray]

The first step is making sure we understand the problem well. Let's do basic examples:

----
A = [-5, 6, 9, -8]
B = [-1, 6, -3, 8]
----

What's the subarray with the maximum sum? For A, it will be `[6, 9]` and for B, it will be `[6, -3, 8]`.

We could generate all possible subarrays, add them up, and then pick the max number.

[source, javascript]
----
include::interview-questions/max-subarray.js[tag=maxSubArrayBrute1]
----

This code is simple to understand; however, not very efficient. The runtime is `O(n^3)`.

If you noticed we adding up the numbers from `i` to `j` on each cycle. But, we can optimize this. We can keep a local variable and add the new number to it. That way, we don't have to revisit previous numbers.

[source, javascript]
----
include::interview-questions/max-subarray.js[tag=maxSubArrayBrute2]
----

The runtime is much better: `O(n)`. Can we still do better?

We can use a greedy approach, where do one pass through the array. We only add the numbers if their sum is larger than just taking the current element.

[source, javascript]
----
include::interview-questions/max-subarray.js[tag=description]
include::interview-questions/max-subarray.js[tag=solution]
----

The runtime is `O(n)` and a space complexity of `O(1)`.




[#array-q-buy-sell-stock]
include::content/part02/array.asc[tag=array-q-buy-sell-stock]

There are multiple examples that we can simulate: bear markets (when prices are going down), bullish markets (when prices are going up), and zig-zag markets (when prices are going up and down).

[source, javascript]
----
// zig-zag market
maxProfit([5, 10, 5, 10]); // => 5
// bullish market
maxProfit([1, 2, 3]); // => 2
// bearish market
maxProfit([3, 2, 1]); // => 0
----

During the bearish markets, the profit will always be 0. Since if you buy, we are only going to lose.

We can do a brute force solution doing all combinations:

[source, javascript]
----
include::interview-questions/buy-sell-stock.js[tag=maxProfitBrute1]
----

The runtime for this solution is `O(n^2)`.

A better solution is to eliminate the 2nd for loop and only do one pass.

Algorithm:

- Do one pass through all the prices
    - Keep track of the minimum price seen so far.
    - calculate `profit = currentPrice - minPriceSoFar`
    - Keep track of the maximun profit seen so far.
- Return maxProfit.

[source, javascript]
----
include::interview-questions/buy-sell-stock.js[tag=description]
include::interview-questions/buy-sell-stock.js[tag=solution]
----

The runtime is `O(n)` and a space complexity of `O(1)`.

:leveloffset: +1

=== Solutions for Linked List Questions
(((Interview Questions Solutions, Linked Lists)))

:leveloffset: -1

[#linkedlist-q-merge-lists]
include::content/part02/linked-list.asc[tag=linkedlist-q-merge-lists]

Algorithm:

- TODO
    - Next TODO

[source, javascript]
----
include::interview-questions/merge-lists.js[tag=description]
include::interview-questions/merge-lists.js[tag=solution]
----

The runtime is `` and a space complexity of ``.



// [#linkedlist-q-merge-lists]
// include::content/part02/linked-list.asc[tag=linkedlist-q-merge-lists]

// Algorithm:

// - TODO
//     - Next TODO

// [source, javascript]
// ----
// include::interview-questions/merge-lists.js[tag=description]
// include::interview-questions/merge-lists.js[tag=solution]
// ----

// The runtime is `` and a space complexity of ``.